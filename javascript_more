let p = new Promise("notAFunction");
-----------------
let big1 = BigInt(123456789012345678901234567890);
let big2 = BigInt(123456789012345678901234567890n);

console.log(big1); // ?
console.log(big2); // ?
--------------
let re = new RegExp("abc");
console.log(re.test("123abc456")); // ?
--------------
let re = new RegExp("abc", "i");
console.log(re.test("123Abc456")); // ?
-------------
let x = new Object(123);
console.log(typeof x); // ?
-------------
let set = new Set([1, 1, 2]);
console.log(set.size); // ?
-----------------
console.log(typeof new Date());  // ?
console.log(typeof Date());      // ?
----------------
let error = new TypeError("Wrong type");
console.log(error.name); // ?
-----------------------
console.log(Symbol("id") == Symbol("id")); // ?
console.log(Symbol("id") === Symbol("id")); // ?

-----------------
const result1 = JSON.parse('{"a":1}');
const result2 = JSON.parse("{'a':1}");

console.log(result1);
console.log(result2);
---------------------
try {
    JSON.parse("{a:1}");
  } catch (e) {
    console.log(e instanceof SyntaxError); // ?
  }

  -------------------
  let a = Number([1, 2]);
console.log(a); // ?

------------------
console.log(typeof new Boolean(false)); // ?
--------------
let obj = Object(null);
console.log(obj); // ?
------------------
let f = Function("x", "y", "return x * y;");
console.log(f(2, 3)); // ?

-------------------
console.log(Array(3));    // ?
console.log(Array.of(3)); // ?
------------------
console.log(Date());        // ?
console.log(new Date());    // ?
-------------------
console.log(Boolean([])); // ?
--------------------
let str = String({ a: 1 });
console.log(str); // ?
--------------------
console.log(Number([,])); // ?
----------------------
let n = new Number(0);

if (n) {
  console.log("Truthy");
} else {
  console.log("Falsy");
}
----------------------------
console.log(Number([]) + Number({})); // ?
-------------------------------
console.log(String([1, 2, [3, 4]])); // ?
----------------------------
let obj = new Object(String);
console.log(typeof obj);     // ?
console.log(typeof obj());   // ?
----------------------------
let arr = new Array(3);
arr[0] = 1;
console.log(arr.map(x => 2 * x)); // ?
----------------------------
let f = Function("return arguments[0] + arguments[1];");
console.log(f(1, 2)); // ?
-------------------------------
console.log(new Function("return typeof this")()); // ?
----------------------------
let arr = Array(2).fill(0).map(() => Math.random());
console.log(arr.length, arr[0] !== arr[1]); // ?
----------------------------
Function("let x = ;"); // ?
----------------------------
console.log(new Date("invalid-date").getTime()); // ?
-------------------------------
let re = new RegExp("^\\d+$");
console.log(re.test("123abc")); // ?
----------------------------
try {
  throw new RangeError("Out of range");
} catch (e) {
  console.log(e instanceof Error);       // ?
  console.log(e instanceof RangeError);  // ?
}
----------------------------
try {
    eval("let x = ;");
  } catch (e) {
    console.log(e.name); // ?
  }
----------------------------
const a = Symbol("id");
const b = Symbol("id");
console.log(a === b); // ?
-------------------------------
const big = BigInt("12345678901234567890");
console.log(typeof big); // ?
----------------------------
const set = new Set([{ a: 1 }, { a: 1 }]);
console.log(set.size); // ?
----------------------------
const map = new Map();
map.set("1", "string");
map.set(1, "number");
console.log(map.size); // ?
----------------------------
const p = new Promise((resolve, reject) => {
  throw new Error("Fail");
});
p.catch(e => console.log(e.message)); // ?
-------------------------------
console.log(Number([]) === Number(false)); // ?
----------------------------
console.log(String(undefined + null)); // ?
----------------------------
const a = new Boolean(false);
console.log(Boolean(a) === a); // ?
----------------------------
const x = new Object(null);
console.log(x.constructor === Object); // ?
-------------------------------
console.log(Array(3).toString()); // ?
----------------------------
console.log(new Function("return typeof arguments")()); // ?
----------------------------
const a = {};
const b = {};
const map = new Map([[a, "A"], [b, "B"]]);
console.log(map.get({})); // ?
----------------------------
console.log(new Date("2023-13-01")); // ?
-------------------------------
const p = new Promise((_, reject) => reject(new Error("fail")));
p.catch(e => { throw e }).catch(console.log); // ?
----------------------------
let sym = Symbol("desc");
console.log(sym + ""); // ?
----------------------------
let s1 = Symbol.for("foo");
let s2 = Symbol.for("foo");
console.log(s1 === s2); // ?
----------------------------
let a = BigInt(1);
let b = 1;
console.log(a == b);  // ?
console.log(a === b); // ?
-------------------------------
let x = Object.assign([], {0: "a", 1: "b", length: 3});
console.log(x); // ?
----------------------------
const arr = Array.of.call(null, 1, 2, 3);
console.log(arr); // ?
----------------------------
Array.from("foo");             // ["f", "o", "o"]
Array.from([1, 2, 3]);         // [1, 2, 3]
Array.from({ length: 3 });     // [undefined, undefined, undefined]
Array.from({ length: 3 }, (_, i) => i); // [0, 1, 2]
----------------------------
console.log(typeof new Error().stack); // ?
-------------------------------
const date = new Date("1970-01-01T00:00:00Z");
console.log(date.getTime()); // ?
----------------------------
const error = new TypeError("Oops");
console.log(error instanceof Error);     // ?
console.log(error instanceof TypeError); // ?
----------------------------
async function test() {
  const result = await new Promise(resolve => setTimeout(() => resolve(5), 1000));
  return result * 2;
}
test().then(console.log); // ?
----------------------------
[1, 2, 3].map(console.log);
// Logs: 1 0 [1,2,3]; 2 1 [1,2,3]; 3 2 [1,2,3]
-------------------------------
[1, 2, 3].map(a => console.log(a));
// Logs: 1, 2, 3
----------------------------
const sym = Symbol("key");
const obj = {[sym]: "value"};
console.log(Object.keys(obj)); // ?
console.log(Object.getOwnPropertySymbols(obj)); // ?
----------------------------
function fn({a = 1, b = 2} = {a: 10}) {
  console.log(a, b);
}
fn();         // ?
fn({});       // ?
fn({b: 3});   // ?
----------------------------
let a = {};
a.b = a;
try {
  JSON.stringify(a);
} catch (e) {
  console.log(e.name); // ?
}
-------------------------------
function complex([a = 1, ...rest] = [2, 3, 4]) {
  console.log(a, rest);
}
complex();        // ?
complex([5]);     // ?
----------------------------
let obj = {__proto__: {a: 1}};
console.log(obj.a); // ?
----------------------------
let iframe = document.createElement('iframe');
document.body.appendChild(iframe);
let arr = new iframe.contentWindow.Array();
console.log(arr instanceof Array); // ?
----------------------------
const arr = [1, , 3];
console.log(arr.map(x => 10)); // ?
-------------------------------
const arr = [1, undefined , 3];
console.log(arr.map(x => 10)); // ?
----------------------------
const arr = [1, null , 3];
console.log(arr.map(x => 10)); // ?
----------------------------
let arr = [1, 2, 3];
delete arr[1];
console.log(arr.length); // ?
console.log(arr[1]);     // ?
----------------------------
let obj = {
  toString() {
    return "foo";
  },
  valueOf() {
    return 42;
  }
};
console.log(`${obj}`); // ?
-------------------------------
const obj = {"key1": "value1", "key2":"value2"};

console.log(`${obj}`)
----------------------------
const obj = {
    "key1": "value1", 
    "key2":"value2",
    toString() {
      return "foo";
    },
};

console.log(`${obj}`);
----------------------------
"use strict";
{
  function foo() {}
}
console.log(typeof foo); // ?
----------------------------
const key = {toString: () => "hello"};
const obj = {
  [key]: "world"
};
console.log(obj.hello); // ?
-------------------------------
const obj = {};
Object.defineProperty(obj, 'x', {
  value: 10,
  enumerable: false
});
const copy = {...obj};
console.log(copy.x); // ?
----------------------------
const obj = {};
Object.defineProperty(obj, 'x', {
  value: 10,
  enumerable: true
});
const copy = {...obj};
console.log(copy.x); // ?
----------------------------
const s = "abc".padEnd(6, ".");
console.log(s.length); // ?
----------------------------
function fn(a, b = 2, ...rest) {}
console.log(fn.length); // ?
-------------------------------
function example(a, b, c = 3, d) {}
console.log(example.length); // 2  ‚Üê stops counting at `c = 3`
----------------------------
try {
  console.log(x);
  let x = 10;
} catch (e) {
  console.log(e.name); // ?
}
----------------------------
const proto = {a: 1};
const obj = Object.create(proto);
obj.b = 2;
const clone = {...obj};
console.log(clone.a); // ?
----------------------------
const obj = {
  toString() {
    return "42";
  }
};
console.log(obj == 42); // ?
-------------------------------
const obj = Object.freeze({ a: { b: 2 } });
obj.a.b = 3;
console.log(obj.a.b); // ?
----------------------------
let a = { n: 1 };
let b = a;
a.x = a = { n: 2 };
console.log(a.x); // ?
console.log(b.x); // ?
----------------------------
function foo() {
    console.log(a);
    var a = 10;
    function a() {}
  }
  foo(); // ?
----------------------------
const obj = {};
Object.defineProperty(obj, 'x', {
  get() { return 10; },
  enumerable: true
});
console.log(Object.keys(obj)); // ?
-------------------------------
const thenable = {
  then(resolve, reject) {
    resolve("resolved");
  }
};
Promise.resolve(thenable).then(console.log); // ?
----------------------------
const payload = JSON.parse('{"__proto__":{"x":123}}');
console.log({}.x); // ?
----------------------------
class A {
  static { console.log("A"); }
}
class B extends A {
  static { console.log("B"); }
}
new B(); // ?
----------------------------
const obj = { a: undefined };
console.log(JSON.stringify(obj)); // ?
-------------------------------
function f() {}
f.constructor = "modified";
console.log(f.constructor === Function); // ?
----------------------------
console.log(+[]);   // ?
console.log(+{});   // ?
----------------------------
const A = { a: 1 };
const B = Object.create(A);
const C = Object.create(B);
console.log(C.a); // ?
-------------------------
console.log(NaN === NaN);       // ?
console.log(Object.is(NaN, NaN)); // ?
-------------------------
console.log("start");
async function foo() {
  console.log("inside foo");
  await null;
  console.log("after await");
}
foo();
console.log("end");
-----------------------
const sym = Symbol("id");
const obj = { [sym]: 123, normal: 456 };
for (let key in obj) console.log(key); // ?
